@*Route*@
@page "/login"

@inject ILocalStorageService LocalStorage

@*Getting HttpClient class*@
@inject HttpClient http

@*For redirecting purposes*@
@inject NavigationManager Navigation

@*For JS confirmations*@
@inject IJSRuntime js

@inject AuthenticationStateProvider AuthStateProvider

@if (users == null)
{ 
    <text>Loading</text>
}
else if(users.Length == 0)
{
    <text>You need to add account before logging to the system</text>
}
else
{
    <div class="container form-row my-auto">
        <div class="row">

            <div class="col-12 col-sm-12 col-md-6 col-lg-6 my-auto">
                <img class="login-img mx-auto d-block align-self-center" src="img/Authentication/Login Image.png">
            </div>

            <div class="col-12 col-sm-12 col-md-6 col-lg-6 my-auto">
                <h4 id="login-text">Welcome to <br> The Manager Portal</h4>

                <div class="login-form mx-auto d-block">
                    <EditForm Model="@loggedUser" OnValidSubmit="@LoginUser">
                        <DataAnnotationsValidator></DataAnnotationsValidator>

                    <div class="form-group">
                        <label id="label-text" for="InputUserName">Your name</label>
                        <InputText @bind-Value="loggedUser.UserName" class="form-control"
                            aria-describedby="emailHelp" placeholder="Enter name"></InputText>
                        <ValidationMessage For="@(() => loggedUser.UserName)" />
                    </div>

                    <div class="form-group">
                        <label id="label-text" for="InputUserEmail">Your email</label>
                        <InputText @bind-Value="loggedUser.UserEmail" class="form-control"
                            aria-describedby="emailHelp" placeholder="Enter email"></InputText>
                        <ValidationMessage For="@(() => loggedUser.UserEmail)" />
                    </div>

                    <div class="form-group">
                        <label id="label-text" for="InputUserPassword">Your password</label>
                        <InputText @bind-Value="loggedUser.UserPassword" class="form-control"
                            aria-describedby="emailHelp" placeholder="Enter password"></InputText>
                        <ValidationMessage For="@(() => loggedUser.UserPassword)" />
                    </div>

                    <button type="submit" class="login-btn btn">Login</button>
                    <br>
                    <p id="register-nav-txt">Don't have an account ? <span style="color: #8676FF"><a href="/register">Register</a></span> from here</p>
                    </EditForm>
                </div>
            </div>

        </div>
    </div>
}


@code {

    AuthEntity loggedUser = new AuthEntity();
    UserEntity user = new UserEntity();
    UserEntity[] users { get; set; }

    public async Task LoginUser()
    {
        string name = "";
        foreach (var user in users)
        {   
            if(loggedUser.UserName == user.UserName)
            {
                name = loggedUser.UserName;
            }
        }

        Console.WriteLine(name);
        //string name = loggedUser.UserName;

        if(!string.IsNullOrEmpty(name))
        {

            user = await http.GetFromJsonAsync<UserEntity>($"api/user/{name}");

            loggedUser.UserRole = user.UserRole;

            var result = await http.PostAsJsonAsync("api/auth", loggedUser);
            if (result.IsSuccessStatusCode)
            {
                Console.WriteLine(result);
                await LocalStorage.SetItemAsync<string>("email", loggedUser.UserEmail);
                await LocalStorage.SetItemAsync<string>("role", loggedUser.UserRole);
                await LocalStorage.SetItemAsync<string>("username", loggedUser.UserName);
                await AuthStateProvider.GetAuthenticationStateAsync();
                Navigation.NavigateTo("/companies");  
            }
            else
            {
                await js.InvokeVoidAsync("alert", "Wrong credentials, try again !");
                Navigation.NavigateTo("/login"); 
            } 
        }
        else
        {
            await js.InvokeVoidAsync("alert", "Wrong credentials, try again !");
            Navigation.NavigateTo("/login");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        users = await http.GetFromJsonAsync<UserEntity[]>("api/user");
    }
}
