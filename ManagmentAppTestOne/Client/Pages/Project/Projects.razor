@*Route*@
@page "/projects/{companyId:guid}"

@*Getting HttpClient class*@
@inject HttpClient http

@*For JS confirmations*@
@inject IJSRuntime js

@*For redirecting purposes*@
@inject NavigationManager Navigation

@inject ISyncLocalStorageService LocalStorage

@using System.Collections


@if (projects == null)
{
    <text>Loading..</text>
}
else if (projects.Length == 0)
{
    <text>No Record Found</text>
}
else
{

    <div class="container">
        <div class="row">
            <div class="col-lg-6 my-auto">
                <h3 class="company-heading">Discover <br> Your Project Stats</h3>
            </div>
            <div class="col-lg-6 my-auto">
                <a class="btn add-company-btn" href="/projects/create/@companyId"><p>Add Project</p></a>
            </div>
        </div>
    </div>

    <table class="table">
        <thead class="table-header">
            <tr>
                <th style="text-align:left; font-weight: 600; padding-top: 20px; padding-bottom: 20px;">Project</th>
                <th style="text-align:left; font-weight: 600; padding-top: 20px; padding-bottom: 20px;">Details</th>
                <th style="text-align:center; font-weight: 600; padding-top: 20px; padding-bottom: 20px;">Status</th>
                <th style="text-align:center; font-weight: 600; padding-top: 20px; padding-bottom: 20px;"></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var project in projects)
            {
                <tr>
                    <td class="col-lg-3" style="text-align:left; font-family: 'Gilroy'; 
                        font-weight: 500; padding-top: 20px; padding-bottom: 20px;">
                        <a style="color: #6C60FF; text-decoration: none; font-weight: 600;" 
                            href = "/tickets/@project.ProjectId">@project.ProjectName</a>
                    </td>
                    <td class="col-lg-5" style="text-align:left; font-family: 'Gilroy'; 
                        font-weight: 500; padding-top: 20px; padding-bottom: 20px; font-size: 15px; line-height:2.0;">
                        @project.ProjectDescription
                    </td>
                    <td class="col-lg-2" style="text-align:center; font-family: 'Gilroy'; 
                        font-weight: 500; padding-top: 20px; padding-bottom: 20px; font-size: 15px;">
                        @project.ProjectStatus
                    </td>
                    <td class="col-lg-2" style="text-align:center; 
                        padding-top: 20px; padding-bottom: 20px;">
                        <button class="btn update-btn" href="/projects/edit/@project.ProjectName" @onclick="@(() => UpdateProject(project.ProjectName))"><p>Update</p></button>
                        <button class="btn delete-btn" @onclick="@(() => DeleteProject(project.ProjectName))"><p>Delete</p></button>
                    </td>
                </tr>   
            }
        </tbody>
    </table>
}


@code {

    [Parameter] public Guid companyId { get; set; }

    ArrayList arlist = new ArrayList(); 
    ArrayList updatedArlist = new ArrayList();

    // An object array of company objects - CompanyModel
    ProjectEntity[] projects { get; set; }
    TicketEntity[] tickets { get; set; }
    UserEntity[] users { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(LocalStorage.GetItemAsString("username")))
        {
            await LoadProjects();
        }
        else
        {
            Navigation.NavigateTo("/login");
        }

    }

    async Task LoadProjects()
    {
        projects = await http.GetFromJsonAsync<ProjectEntity[]>($"api/project/{companyId}");
        tickets = await http.GetFromJsonAsync<TicketEntity[]>("api/ticket");
        users = await http.GetFromJsonAsync<UserEntity[]>("api/user");
        //await UserValidation();
    }

    async Task UpdateProject(string projectName)
    {
        if(await js.InvokeAsync<bool>("confirm", "Are you sure you want to edit ?"))
        {
            Navigation.NavigateTo($"/projects/edit/{projectName}");
            await LoadProjects();
        } 
    }

    async Task DeleteProject(string projectName)
    {
        if(await js.InvokeAsync<bool>("confirm", "Are you sure you want to delete ?"))
        {
            await http.DeleteAsync($"api/project/{projectName}");
            await LoadProjects();
        }
    }

    /*async Task UserValidation()
    {
        for ( int i = 0 ; i < users.Length ; i++ )
        {
            arlist.Add(users[i].UserName);
        }
        Console.WriteLine(arlist.Contains("Vihan Perera"));
    }*/
}
