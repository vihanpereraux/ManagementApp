@*Route*@
@page "/tickets/create/{projectId:guid}"

@*Getting HttpClient class*@
@inject HttpClient http

@*For redirecting purposes*@
@inject NavigationManager Navigation

<h3>Add Ticket</h3>

@*<TicketForm buttonText = "Add Ticket" ticket = "@ticket" OnValidSubmit = "@CreateTicket"></TicketForm>*@

<EditForm Model="@ticket" OnValidSubmit="@CreateTicket">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="form-group">
        <label class="control-label">Ticket Name</label>
        <InputText @bind-Value="ticket.TicketTitle"></InputText>
        <ValidationMessage For="@(() => ticket.TicketTitle)" />
    </div>

    <div class="form-group">
        <label class="control-label">Ticket Details</label>
        <InputText @bind-Value="ticket.TicketDescription"></InputText>
        <ValidationMessage For="@(() => ticket.TicketDescription)" />
    </div>

    <div class="form-group">
        <label class="control-label">Ticket Status</label>
        <InputText  @bind-Value="ticket.TicketState"></InputText>
        <ValidationMessage For="@(() => ticket.TicketState)" />
    </div>

    @*<div class="form-group">
        <label class="control-label">Allocated User</label>
        <div class = "col-sm-12">
            <InputSelect @bind-Value="xxx">
                @foreach (var user in users)
                {
                    <option value="@user.UserId">@user.UserName</option>
                }
            </InputSelect>
            <InputSelect id="user" @bind-Value="userId" class="form-control">
                @foreach(var user in users)
                {
                    <option value="@user.UserId">@user.UserName</option>
                }
            </InputSelect>
        </div>
    </div>*@

    

    <button type="submit" class="btn btn-success">Add</button>

</EditForm>

@code {

    [Parameter] public Guid projectId { get; set; }

    TicketEntity ticket = new TicketEntity();

    UserEntity[] users { get; set; }
    public string xxx { get; set; }

    public string userId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        users = await http.GetFromJsonAsync<UserEntity[]>("api/user");
        xxx = ticket.UserId.ToString();
        foreach(var user in users)
        {
            Console.WriteLine(user.UserName);
        }
        
    }

    async Task CreateTicket()
    {
        ticket.ProjectId = projectId;
        await http.PostAsJsonAsync("api/ticket", ticket);
        Navigation.NavigateTo("/tickets");
    }

}
