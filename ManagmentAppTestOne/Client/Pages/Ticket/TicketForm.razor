@page "/tickets/ticketform"

@*Getting HttpClient class*@
@inject HttpClient http

<EditForm Model="@ticket" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="form-group">
        <label class="control-label">Ticket Name</label>
        <InputText @bind-Value="ticket.TicketTitle"></InputText>
        <ValidationMessage For="@(() => ticket.TicketTitle)" />
    </div>

    <div class="form-group">
        <label class="control-label">Ticket Details</label>
        <InputText @bind-Value="ticket.TicketDescription"></InputText>
        <ValidationMessage For="@(() => ticket.TicketDescription)" />
    </div>

    <div class="form-group">
        <label class="control-label">Ticket Status</label>
        <InputText  @bind-Value="ticket.TicketState"></InputText>
        <ValidationMessage For="@(() => ticket.TicketState)" />
    </div>

    <div class="form-group">
        <label class="control-label">Allocated User</label>
        <div class = "col-sm-12">
            <InputSelect id="user" @bind-Value="ticket.UserId" class="form-control">
                @foreach(var user in users)
                {
                    <option value="@user.UserId">@user.UserName</option>
                }
            </InputSelect>
        </div>
    </div>

    

    <button type="submit" class="btn btn-success">@buttonText</button>

</EditForm>

@code {

    [Parameter] public TicketEntity ticket { get; set; }
    [Parameter] public string buttonText { get; set; } = "Save Ticket";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    UserEntity[] users { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    async Task LoadUsers()
    {
        users = await http.GetFromJsonAsync<UserEntity[]>("api/user");
    }

}
