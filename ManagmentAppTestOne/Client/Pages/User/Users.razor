@*Route*@
@page "/users"

@*Getting HttpClient class*@
@inject HttpClient http

@*For JS confirmations*@
@inject IJSRuntime js

@*For redirecting purposes*@
@inject NavigationManager Navigation

@inject ISyncLocalStorageService LocalStorage


@if (users == null)
{
    <text>Loading..</text>
}
else if (users.Length == 0)
{
    <text>No Record Found</text>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-lg-6 my-auto">
                <h3 class="company-heading">Discover <br> Your Employees</h3>
            </div>
            <div class="col-lg-6 my-auto">
                <a class="btn add-company-btn" href="/users/create"><p>Add employee</p></a>
            </div>
        </div>
    </div>

    <table class="table">
        <thead class="table-header">
            <tr>
                <th style="text-align:left; font-weight: 600; padding-top: 20px; padding-bottom: 20px;">Name</th>
                <th style="text-align:left; font-weight: 600; padding-top: 20px; padding-bottom: 20px;">Occupation</th>
                @*<th style="text-align:left; font-weight: 600; padding-top: 20px; padding-bottom: 20px;">Capability</th>*@
                <th style="text-align:left; font-weight: 600; padding-top: 20px; padding-bottom: 20px;">Email</th>
                <th style="text-align:center"></th>
                @*<th>Delete</th>*@
            </tr>
        </thead>
        <tbody>
            @foreach(var user in users)
            {
                <tr>
                    <td class="col-lg-3" style="text-align:left; font-family: 'Gilroy'; 
                        font-weight: 500; padding-top: 20px; padding-bottom: 20px;">
                        <a style="color: #6C60FF; text-decoration: none; font-weight: 600;" 
                            href = "">@user.UserName</a>
                    </td>
                    <td class="col-lg-3 pr-3" style="text-align:left; font-family: 'Gilroy'; 
                        font-weight: 500; padding-top: 20px; padding-bottom: 20px;">
                        @user.UserOccupation
                    </td>
                    @*<td class="col-lg-5" style="text-align:left; font-family: 'Gilroy'; 
                        font-weight: 500; padding-top: 20px; padding-bottom: 20px;">
                        @user.UserCapacity
                    </td>*@
                    <td class="col-lg-2" style="text-align:left; font-family: 'Gilroy'; 
                        font-weight: 500; padding-top: 20px; padding-bottom: 20px;">                         
                        @user.UserEmail
                    </td>
                    <td class="col-lg-3" style="text-align:center; 
                        padding-top: 20px; padding-bottom: 20px;">
                        <button class="btn update-btn" @onclick="@(() => UpdateUser(user.UserName))"><p>Update</p></button>
                        <button class="btn delete-btn" @onclick="@(() => DeleteUser(user.UserName))"><p>Delete</p></button>
                    </td>
                </tr>   
            }
        </tbody>
    </table>

    @*<a class="btn btn-success mt-3" href="/users/create">Add User</a>*@
}

@code {

    UserEntity[] users { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(LocalStorage.GetItemAsString("username")))
        {
            await LoadUsers();
        }
        else
        {
            Navigation.NavigateTo("/login");
        }
        //await LoadUsers();
    }

    async Task LoadUsers()
    {
        users = await http.GetFromJsonAsync<UserEntity[]>("api/user");
    }

    async Task UpdateUser(string userName)
    {
        if(await js.InvokeAsync<bool>("confirm", "Are you sure you want to edit ?"))
        {
            Navigation.NavigateTo($"users/edit/{userName}");
            await LoadUsers();
        }
    }

    async Task DeleteUser(string userName)
    {
        if(await js.InvokeAsync<bool>("confirm", "Are you sure you want to edit ?"))
        {
            await http.DeleteAsync($"api/user/{userName}");
            await LoadUsers();
        }
    }
}
